package com.example.luvyourleftovers;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.os.Bundle;
import android.view.MenuItem;
import android.widget.Toast;

import androidx.appcompat.widget.Toolbar;

<<<<<<< HEAD
public class MainActivity extends AppCompatActivity implements RecyclerViewAdapter.ItemClickListener
{
    private static final int CAMERA_REQUEST = 1888;
    private ImageView imageView;
    private static final int MY_CAMERA_PERMISSION_CODE = 100;
    RecyclerViewAdapter rvaAdapter;
    ArrayList<String> ingredients;
    Button searchButton;
=======
import com.google.android.material.navigation.NavigationView;

public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener
{
    private DrawerLayout drawer;
>>>>>>> fbc39f3ca3308e80c4b28649f959083f7ff3044c

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home);

        // Setting the tool bar per activity rather than using one for all of them for more flexibility.
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        drawer = findViewById(R.id.drawer_layout);

<<<<<<< HEAD
        // set it up to get user inputs
        final EditText ingredientInputArea = findViewById(R.id.inputBox);
        searchButton = findViewById(R.id.searchButton);
        Button photoButton = findViewById(R.id.insertPhoto);

        photoButton.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                if (checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)
                {
                    requestPermissions(new String[]{Manifest.permission.CAMERA}, MY_CAMERA_PERMISSION_CODE);
                }
                else
                {
                    Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
                    startActivityForResult(cameraIntent, CAMERA_REQUEST);
                }
            }
        });
=======
        NavigationView navigationView = findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
>>>>>>> fbc39f3ca3308e80c4b28649f959083f7ff3044c

        // Automatically adds the button in the toolbar to open the navigation drawer.
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);

<<<<<<< HEAD
        // User inserts an ingredient.
        findViewById(R.id.insertButton).setOnClickListener((view) ->
        {
            String input = ingredientInputArea.getText().toString();

            if (!input.isEmpty())
            {
                addToContainer(ingredientInputArea.getText().toString());
                ingredientInputArea.setText("");
            }
        });

        // What happens when search button is clicked.
        searchButton.setOnClickListener((view) ->
        {
            // TODO add the ingredient to list of previously searched ingredients.
            performSearch();
        });

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults)
    {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == MY_CAMERA_PERMISSION_CODE)
        {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED)
            {
                Toast.makeText(this, "camera permission granted", Toast.LENGTH_LONG).show();
                Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
                startActivityForResult(cameraIntent, CAMERA_REQUEST);
            }
            else
            {
                Toast.makeText(this, "camera permission denied", Toast.LENGTH_LONG).show();
            }
=======
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        // Setting the default tab/fragment on first open, avoiding the opening of the fragment each time there's an interruption.
        if(savedInstanceState == null)
        {
            getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, new InputFragment()).commit();
            navigationView.setCheckedItem(R.id.nav_home);
>>>>>>> fbc39f3ca3308e80c4b28649f959083f7ff3044c
        }

    }

    @Override
<<<<<<< HEAD
    protected void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == CAMERA_REQUEST && resultCode == Activity.RESULT_OK)
        {
            Bitmap photo = (Bitmap) data.getExtras().get("data");
            FirebaseVisionImage image = FirebaseVisionImage.fromBitmap(photo);
            FirebaseVisionImageLabeler detector = FirebaseVision.getInstance().getCloudImageLabeler();
            callDetector(detector, image, this);
=======
    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem)
    {
        switch (menuItem.getItemId())
        {
            case R.id.nav_home:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, new InputFragment()).commit();
                break;

            case R.id.nav_favourites:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, new FavouritesFragment()).commit();
                break;

            case R.id.nav_shoppingList:
                getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, new ShoppingListFragment()).commit();
                break;

            case R.id.nav_settings:
                Toast.makeText(this, "Settings", Toast.LENGTH_SHORT).show();
                break;
>>>>>>> fbc39f3ca3308e80c4b28649f959083f7ff3044c
        }

        drawer.closeDrawer(GravityCompat.START);

<<<<<<< HEAD
    public void performSearch()
    {
        String formattedInput = android.text.TextUtils.join(",", ingredients);
        Toast.makeText(this, formattedInput, Toast.LENGTH_SHORT).show();
    }


    public void addToContainer(String text)
    {
        ingredients.add(text);
        searchButton.setVisibility(View.VISIBLE);

        Button newIngredientButton = new Button(this);
        newIngredientButton.setText(text);

        final FlowLayout flowLayout = findViewById(R.id.flowLayout);
        flowLayout.addView(newIngredientButton);

        newIngredientButton.setOnClickListener((v) ->
        {
            ingredients.remove(newIngredientButton.getText());
            
            flowLayout.removeView(v);

            if (ingredients.size() == 0)
            {
                searchButton.setVisibility(View.GONE);
            }
        });

        Toast.makeText(this, ingredients.toString(), Toast.LENGTH_SHORT).show();
    }

    //TODO: Grab data on link in API Response header (@Royal Thomas is this your part?)
    @Override
    public void onItemClick(View view, int position)
    {
        //Sending toast message, but it can also call a method to execute any intent/function call available in-app
        Toast.makeText(this, "You clicked " + rvaAdapter.getItem(position) + " on row number " + (position + 1), Toast.LENGTH_SHORT).show();
    }


    protected void callDetector(FirebaseVisionImageLabeler detector, FirebaseVisionImage image, Context context)
    {
        ArrayList<String> results = new ArrayList<>();
        Toast.makeText(context, "Generating Result, Hold on!", Toast.LENGTH_SHORT).show();

        Task<List<FirebaseVisionImageLabel>> result  = detector.processImage(image)
                        .addOnSuccessListener(
                                new OnSuccessListener<List<FirebaseVisionImageLabel>>() {
                                    @Override
                                    public void onSuccess(List<FirebaseVisionImageLabel> labels)
                                    {
                                        StringBuilder output = new StringBuilder();

                                        for (FirebaseVisionImageLabel label : labels)
                                        {
                                            String text = label.getText();
                                            if (isRecognizedIngredient(text))
                                                results.add(text);
                                        }

                                        if (results.size() > 0)
                                        {
                                            AlertDialog.Builder builder = new AlertDialog.Builder(context);
                                            ArrayList<String> selections = new ArrayList<>();
                                            builder.setTitle("Find any items?").setPositiveButton("Ok", new DialogInterface.OnClickListener()
                                                    {
                                                        @Override
                                                        public void onClick(DialogInterface dialogInterface, int i)
                                                        {
                                                            selections.forEach((value) -> {
                                                                addToContainer(value);
                                                            });
                                                        }
                                                    })
                                                    .setCancelable(false)
                                                    .setMultiChoiceItems(results.toArray(new String[0]), null, new DialogInterface.OnMultiChoiceClickListener()
                                                    {
                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which, boolean isChecked)
                                                        {
                                                            selections.add(results.get(which));
                                                        }
                                                    });
                                            builder.show();
                                        }
                                        else
                                        {
                                            Toast.makeText(context, "Didn't find any ingredients, oops!", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                })
                        .addOnFailureListener(
                                new OnFailureListener()
                                {
                                    @Override
                                    public void onFailure(@NonNull Exception e)
                                    {
                                        System.out.println(e);
                                    }
                                });

    }

    Boolean isRecognizedIngredient(String ingredient)
    {
        Boolean validIngredient = false;
        Future<String> result = Ion.with(this).load("http://royalthomas.me/checkIngredient.php?ingredient=" + uriEncode(ingredient)).asString();

        try
        {
            if (result.get().contains("True"))
            {
                validIngredient = true;
                System.out.println("YES??!???AS?DAS" + ingredient);
            }
        }
        catch (Exception ex)
        {
            System.out.println(ex);
        }

        return validIngredient;
    }

    String uriEncode(String input)
    {
        return input.replaceAll(" ", "+").toLowerCase();
    }
}
=======
        return true;
    }

    @Override
    public void onBackPressed()
    {
        if (drawer.isDrawerOpen(GravityCompat.START))
        {
            drawer.closeDrawer(GravityCompat.START);
        }
        else
        {
            super.onBackPressed();
        }
    }
}
